{"version":3,"file":"index.esm.js","sources":["../../src/index.ts"],"sourcesContent":["type OptionsType = {\n  timestampDivider?: number\n  rawFormat?: boolean\n}\n\n// parse and divide time by\nconst calculateTimestamp = (timeStamp: number, divider: number) => {\n  return parseInt(Math.ceil(timeStamp / divider).toString())\n}\n\n// TODO: Better form of data to return for InputAttributes\n// TODO: user selections events\nexport class InputObserver {\n  private callback\n  private options\n\n  constructor(\n    callback: EventCallback,\n    options?: OptionsType,\n  ) {\n    this.callback = callback\n    this.options = {\n      timestampDivider: 100,\n      rawFormat: false,\n      ...options,\n    }\n  }\n\n  observe(element: InputElement) {\n    this.on('input', element, this.callback)\n    this.on('blur', element, this.callback)\n    this.on('focus', element, this.callback)\n  }\n\n  on(\n    type: any,\n    target: InputTarget = document,\n    fn: EventCallback,\n  ): EventHandler {\n    const options = { capture: true, passive: true }\n\n    target.addEventListener(type, this.onCallback.bind(this, fn), options)\n\n    return () => target.removeEventListener(type, fn, options)\n  }\n\n  onCallback(fn: EventCallback, event: Event) {\n    if (this.options.rawFormat) return fn(event)\n\n    return fn(this.convertInput(event))\n  }\n\n  convertInput(event: Event): InputObserverValue {\n    if (event instanceof InputEvent) {\n      return {\n        data: (<InputElement>event.currentTarget).value,\n        isTrusted: event.isTrusted,\n        inputType: event.inputType,\n        timeStamp: calculateTimestamp(\n          event.timeStamp,\n          this.options.timestampDivider,\n        ),\n      }\n    } else if (event instanceof FocusEvent) {\n      return {\n        data: null,\n        isTrusted: event.isTrusted,\n        inputType: event.type,\n        timeStamp: calculateTimestamp(\n          event.timeStamp,\n          this.options.timestampDivider,\n        ),\n      }\n    } else {\n      return event\n    }\n  }\n}\n"],"names":[],"mappings":"AAKA;AACA,MAAM,kBAAkB,GAAG,CAAC,SAAiB,EAAE,OAAe;IAC5D,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAA;AAC5D,CAAC,CAAA;AAED;AACA;MACa,aAAa;IAIxB,YACE,QAAuB,EACvB,OAAqB;QAErB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,OAAO,mBACV,gBAAgB,EAAE,GAAG,EACrB,SAAS,EAAE,KAAK,IACb,OAAO,CACX,CAAA;KACF;IAED,OAAO,CAAC,OAAqB;QAC3B,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QACxC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;QACvC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;KACzC;IAED,EAAE,CACA,IAAS,EACT,SAAsB,QAAQ,EAC9B,EAAiB;QAEjB,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;QAEhD,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;QAEtE,OAAO,MAAM,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAA;KAC3D;IAED,UAAU,CAAC,EAAiB,EAAE,KAAY;QACxC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS;YAAE,OAAO,EAAE,CAAC,KAAK,CAAC,CAAA;QAE5C,OAAO,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;KACpC;IAED,YAAY,CAAC,KAAY;QACvB,IAAI,KAAK,YAAY,UAAU,EAAE;YAC/B,OAAO;gBACL,IAAI,EAAiB,KAAK,CAAC,aAAc,CAAC,KAAK;gBAC/C,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,SAAS,EAAE,kBAAkB,CAC3B,KAAK,CAAC,SAAS,EACf,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC9B;aACF,CAAA;SACF;aAAM,IAAI,KAAK,YAAY,UAAU,EAAE;YACtC,OAAO;gBACL,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,SAAS,EAAE,KAAK,CAAC,IAAI;gBACrB,SAAS,EAAE,kBAAkB,CAC3B,KAAK,CAAC,SAAS,EACf,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAC9B;aACF,CAAA;SACF;aAAM;YACL,OAAO,KAAK,CAAA;SACb;KACF;;;;;"}